#!/bin/bash

# Stop on first error
set -e

echo "Running pre-install script..."

# cd /path/to/your/jekyll/project  # Update this to the correct path
echo $( pwd )

# Check required environment variables
if [ -z "$JEKYLL_ENV" ]; then
  export JEKYLL_ENV=production
  echo "Set default JEKYLL_ENV to production"
else
  echo "Using JEKYLL_ENV: $JEKYLL_ENV"
fi

# Check for Gemfile and install dependencies
if [ -f Gemfile ]; then
  echo "Gemfile found, installing dependencies..."
  bundle config set --local path 'vendor/bundle'
else
  echo "No Gemfile found, skipping bundle install"
fi

# Custom environment setup can go here
# For example, setting up Node.js or Python environments

echo "Pre-install script completed successfully."



echo "Running pre-install script..."
echo "Current directory: $(pwd)"
echo "Listing directory contents:"
ls -l

# Check for the presence of a Gemfile to install Ruby dependencies.
if [ -f Gemfile ]; then
  echo "Gemfile found, installing dependencies..."
  # Install dependencies locally in the vendor/bundle directory.
  bundle install --path vendor/bundle
else
  echo "No Gemfile found in the expected directory. Please verify the path and presence of Gemfile."
  exit 1
fi

find . -type f -name Gemfile

echo "Dependencies installed successfully."
echo "Pre-install script completed successfully."
